package za.co.wethinkcode.toyrobot.maze;

import za.co.wethinkcode.toyrobot.world.Obstacle;
import za.co.wethinkcode.toyrobot.world.SquareObstacle;

import java.util.ArrayList;
import java.util.List;

public class DesignedMaze extends AbstractMaze{


    private  ArrayList<ArrayList<Integer>> createMaze(boolean Obstacles){

        ArrayList<ArrayList<Integer>> listOFCoordinatesXY = new ArrayList<>();

        ArrayList<ArrayList<Integer>> pathOFCoordinatesXY = new ArrayList<>();

        String[][] maze = {
            {"##########################     ###################"},
            {"###                            ###################"},
            {"###  ######    ##############  ###################"},
            {"###  ######    ##############  ###################"},
            {"###  ######                                  #####"},
            {"###      ##    ##########################    #####"},
            {"#######  ##    ##########################    #####"},
            {"#######  ##    ##########################    #####"},
            {"#######  ##                                  #####"},
            {"#######  ##  ###############      ################"},
            {"#######  ##  ###############      ################"},
            {"#######  ##                                     ##"},
            {"#######  ##  #######    #####################   ##"},
            {"#######  ##  #######    #####################   ##"},
            {"#######  ##  #######    #####################   ##"},
            {"#######  ##             #####################   ##"},
            {"#######  ############                           ##"},
            {"#######  ############   #####################   ##"},
            {"#######  ############   #####################   ##"},
            {"#######  ############   #####################   ##"},
            {"#######                 #####################   ##"},
            {"#######  ############   #####################   ##"},
            {"#                                               ##"},
            {"#  ###########    ##################  ##  ########"},
            {"#  ###########    ##################  ##  ########"},
            {"#  ###########    ##################  ##  ########"},
            {"#  ###########    ##################  ##  ########"},
            {"#  ###########    ##################  ##  ########"},
            {"#        #####    ##################             #"},
            {"#######  #####    ############################   #"},
            {"#######                    #######################"},
            {"#######################    #######################"},
            {"#######################    #######################"},
            {"#                                                #"},
            {"#  #######  ######################################"},
            {"#                                                #"},
            {"#####  ###  ###    ############  #################"},
            {"#####  ###  ###    ############  #################"},
            {"#####  ###  ###    ############  #################"},
            {"#####  ###  ###    ##########                    #"},
            {"#####  ###  ###    ##########   ##################"},
            {"#####  ###  ###    ##########   ##################"},
            {"#####  ###  ###    ##########   ##################"},
            {"#####       ###    ##########   ##################"},
            {"###############    ##########   ##################"},
            {"###############    ##########   ##################"},
            {"###############    ##########   ##################"},
            {"#                  ##########   ##################"},
            {"#  ############    ##########   ##################"},
            {"#                                                #"},
            {"#  #####    #################     ############   #"},
            {"#  #####    #################     ############   #"},
            {"#                                                #"},
            {"#  #####    ######################################"},
            {"#                                              ###"},
            {"#####  ###############  ####################   ###"},
            {"#####  ###############  ####################   ###"},
            {"#####  ###############  ####################   ###"},
            {"#####  ###############  ####################   ###"},
            {"#####  ###############  ####################   ###"},
            {"#####  ###############  ####################   ###"},
            {"#####                                          ###"},
            {"#####  #####################################   ###"},
            {"#####  ##########   ########################   ###"},
            {"       ##########   ########################   ###"},
            {"#####  ##########   ########################   ###"},
            {"#####  ##########   ########################   ###"},
            {"#####  ##########   ####################       ###"},
            {"#####                                     ########"},
            {"#####  ##################   ############  ########"},
            {"#####  ##################   ############  ########"},
            {"#####  ##################   ############  ########"},
            {"#####                                     ########"},
            {"#####  ##############  #################  ########"},
            {"#####  ##############  #################  ########"},
            {"#####  ##############  #################  ########"},
            {"#####  ##############  #################  ########"},
            {"#####                                     ########"},
            {"#####  #######  #####  ############ ####  ########"},
            {"#####  #######  #####  ############ ####  ########"},
            {"#####  #######  #####  ############ ####  ########"},
            {"#####  #######  #####                            #"},
            {"#####  #######  #####  ########################  #"},
            {"#####  #######  #####  ########################  #"},
            {"#####  #######  #####  ########################  #"},
            {"#                                                #"},
            {"#   ####  #########################  ###   #######"},
            {"#   ####  #########################  ###          "},
            {"#   ####                             ###   #######"},
            {"#   ########  #####################  ###   #######"},
            {"#   ########  #####################  ###   #######"},
            {"#   ########  #####################  ###   #######"},
            {"#   ########  #####################  ###   #######"},
            {"#   ########  #####################  ###         #"},
            {"#   ########  #####################  ###   ####  #"},
            {"#                                    ###   ####  #"},
            {"#   ##########################  ###############  #"},
            {"#   ##########################  ###############  #"},
            {"#                                                #"},
            {"################   ###############################"}
    };
        for(int y = 0; y < maze.length; y++){

            for(int x = 0; x < maze[y][0].length(); x++){

                ArrayList<Integer> XYcoordinates = new ArrayList<>();

                int screenX = -100 + (x*4);
                int screenY = 200 - (y*4);

                if(maze[y][0].charAt(x) == '#'){
                    XYcoordinates.add(screenX);
                    XYcoordinates.add(screenY);
                    listOFCoordinatesXY.add(XYcoordinates);
                }else{
                    XYcoordinates.add(screenX);
                    XYcoordinates.add(screenY);
                    pathOFCoordinatesXY.add(XYcoordinates);

                }

            }
        }

        if(Obstacles) {
            return pathOFCoordinatesXY;
        }else{
            return listOFCoordinatesXY;
        }
    }

    @Override
    public List<Obstacle> getObstacles() {
        List<Obstacle> obstacles = new ArrayList<>();
        for(ArrayList<Integer> cor : createMaze(false)){
            int corX = cor.get(0);
            int randY = cor.get(1);
            obstacles.add(new SquareObstacle(corX, randY));
        }
        return obstacles;
    }

    @Override
    public List<Obstacle> getObstaclePath() {
        List<Obstacle> obstacles = new ArrayList<>();
        for(ArrayList<Integer> cor : createMaze(true)){
            int corX = cor.get(0);
            int corY = cor.get(1);
            obstacles.add(new SquareObstacle(corX, corY));
        }
        return obstacles;
    }

}

